//You have been given a head to a singly linked list of integers. Write a function check to whether the list given is a 'Palindrome' or not.

//Our Code Starts From Here
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/
int length(Node*head){
	int count=0;
	Node*temp=head;
	
	while(temp!=NULL){
		count++;
		temp=temp->next;
	}
	return count;
}
bool isPalindrome(Node *head)
{
	if(head==NULL||head->next==NULL){
		return true;
	}
    int len=length(head);
	Node *temp=head;
   int halflen=len/2;
   if(len%2==0){
	for(int i=0;i<halflen-1;i++){
		temp=temp->next;
	}
	Node *secondhalf=temp->next;
	temp->next=NULL;
	Node*temp2=secondhalf->next;
	secondhalf->next=NULL;
	for(int i=0;i<halflen-1;i++){
		Node *temp3=temp2->next;
		temp2->next=secondhalf;
		secondhalf=temp2;
		temp2=temp3;
	}
	Node*temp1=head;
	for(int i=0;i<halflen;i++){
		if(temp1->data !=secondhalf->data){
				return false;	
		}
		else{
		
			temp1=temp1->next;
		secondhalf=secondhalf->next;
		}
	
	}
	return true;
   }
   else{
	   	for(int i=0;i<halflen;i++){
		temp=temp->next;
	}
	Node *secondhalf=temp->next;
	temp->next=NULL;
	Node*temp2=secondhalf->next;
	secondhalf->next=NULL;
	for(int i=0;i<halflen-1;i++){
		Node *temp3=temp2->next;
		temp2->next=secondhalf;
		secondhalf=temp2;
		temp2=temp3;
	}
	Node*temp1=head;
	for(int i=0;i<halflen;i++){
		if(temp1->data !=secondhalf->data){
				return false;	
		}
		else{
		
			temp1=temp1->next;
		secondhalf=secondhalf->next;
		}
	
	}
	return true;
   }
}
//Our Code Ends Here
