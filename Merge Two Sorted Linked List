//You have been given two sorted(in ascending order) singly linked lists of integers.
Write a function to merge them in such a way that the resulting singly linked list is also sorted(in ascending order) and return the new head to the list.

//Our Code Starts From Here
/****************************************************************
 
    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

Node *mergeTwoSortedLinkedLists(Node *head1, Node *head2)
{
//If either one of the LL or both LL is empty
	if(head1==NULL){
		return head2;
	}
	if(head2==NULL){
		return head1;
	}
	else if(head1==NULL && head2==NULL){
		return NULL;
	}
  
  Node *temp1=head1;
	Node *temp2=head2;
	Node *NewHead=NULL;
	Node *NewTail=NULL;
  
  //Checking which node is minimum from both LL to make it new head  node of our new LL
	if((temp1->data) < (temp2->data)){
			NewHead=temp1;
			NewTail=temp1;
			temp1=temp1->next;
		}
		else{
			NewHead=temp2;
			NewTail=temp2;
			temp2=temp2->next;
		}
    
    //sorting New LL by combining both sorted LL
	while(temp1!=NULL && temp2!=NULL){
		if((temp1->data) < (temp2->data)){
			NewTail->next=temp1;
			NewTail=temp1;
			temp1=temp1->next;
		}
		else{
			NewTail->next=temp2;
			NewTail=temp2;
			temp2=temp2->next;
		}
	}
  
  //After completing one LL checking if another LL is empty and connecting it at the end of new LL
	if(temp1!=NULL){
		NewTail->next=temp1;
	}
	else if(temp2!=NULL){
		NewTail->next=temp2;
	}
	return NewHead;
}

//Our code Ends Here
